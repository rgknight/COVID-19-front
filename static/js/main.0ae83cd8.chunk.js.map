{"version":3,"sources":["CovidCharts.js","App.js","serviceWorker.js","index.js"],"names":["CovidCharts","props","state","counties","fetch","then","results","json","data","console","log","setState","this","Container","Header","as","style","color","marginBottom","Grid","columns","map","c","Column","width","key","county","ticks","stroke","size","tickLabels","fontSize","tickFormat","tick","moment","format","fixLabelOverlap","dependentAxis","x","y","labels","datum","date","total_cases","new_cases","labelComponent","flyoutStyle","fill","strokeWidth","countyCharts","_","slice","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qaAyHeA,E,YAnDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,SAAU,IAHK,E,iFAOE,IAAD,OAClBC,MAhEF,qGAiEKC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GACJC,QAAQC,WAAWF,GACnBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAER,SAAUK,EAAKL,gB,+BAKnC,IAAMA,EAAWS,KAAKV,MAAMC,SAC5B,OACE,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,sDAGA,kBAACD,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAO,CAAEC,MAAO,SAAhC,aAGA,kBAACH,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAO,CAAEC,MAAO,OAAQC,aAAc,SAAtD,eAGA,kBAACC,EAAA,EAAD,CAAMC,QAAQ,KACZ,oCACGjB,EAASkB,KAAI,SAAAC,GACZ,OACE,oCACE,kBAACH,EAAA,EAAKI,OAAN,CAAaC,MAAM,IAAIC,IAAK,IAAMH,EAAEI,QAClC,kBAACZ,EAAA,EAAD,CAAQC,GAAG,KAAKU,IAAK,IAAMH,EAAEI,QAC1BJ,EAAEI,QAvFJ,SAAAlB,GACnB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEQ,MAAO,CACLW,MAAO,CAAEC,OAAQ,OAAQC,KAAM,GAC/BC,WAAY,CAAEC,SAAU,KAE1BC,WAAY,SAAAC,GAAI,OAAIC,IAAOD,GAAME,OAAO,QACxCC,iBAAe,IAEjB,kBAAC,IAAD,CACEC,eAAa,EACbrB,MAAO,CACLc,WAAY,CAAEC,SAAU,OAG5B,kBAAC,IAAD,CACEvB,KAAMA,EACN8B,EAAE,OACFC,EAAE,cACFC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACNP,IAAOO,EAAMC,MAAMP,OAAO,OAC1B,KACAM,EAAME,YACN,WACAF,EAAMG,UACN,QAEFC,eACE,kBAAC,IAAD,CACEC,YAAa,CACXC,KAAM,OACNhB,SAAU,MAIhBf,MAAO,CAAER,KAAM,CAAEuC,KAAM,WAEzB,kBAAC,IAAD,CACEvC,KAAMA,EACN8B,EAAE,OACFC,EAAE,YACFvB,MAAO,CAAER,KAAM,CAAEoB,OAAQ,OAAQoB,YAAa,OA8CjCC,EA7FHzC,EA6F0Bc,EAAEd,KA5FrC0C,IAAEC,MAAM3C,GAAO,QADN,IAAAA,Y,GAqDQ4C,IAAMC,WC1DjBC,E,iLAJX,OAAO,kBAAC,EAAD,U,GAFOD,aCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.0ae83cd8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport { Container, Header, Grid } from \"semantic-ui-react\";\r\nimport {\r\n  VictoryBar,\r\n  VictoryChart,\r\n  VictoryAxis,\r\n  VictoryLabel,\r\n  VictoryLine,\r\n  VictoryTooltip\r\n} from \"victory\";\r\n\r\nconst Target =\r\n  \"https://raw.githubusercontent.com/rgknight/COVID-19-MA-County/master/data/covid-19-ma-county.json\";\r\n\r\nconst sliceData = data => {\r\n  return _.slice(data, -15);\r\n};\r\n\r\nconst countyCharts = data => {\r\n  return (\r\n    <VictoryChart>\r\n      <VictoryAxis\r\n        style={{\r\n          ticks: { stroke: \"grey\", size: 5 },\r\n          tickLabels: { fontSize: 20 }\r\n        }}\r\n        tickFormat={tick => moment(tick).format(\"M/D\")}\r\n        fixLabelOverlap\r\n      />\r\n      <VictoryAxis\r\n        dependentAxis\r\n        style={{\r\n          tickLabels: { fontSize: 20 }\r\n        }}\r\n      />\r\n      <VictoryBar\r\n        data={data}\r\n        x=\"date\"\r\n        y=\"total_cases\"\r\n        labels={({ datum }) =>\r\n          moment(datum.date).format(\"M/D\") +\r\n          \"\\n\" +\r\n          datum.total_cases +\r\n          \" total\\n\" +\r\n          datum.new_cases +\r\n          \" new\"\r\n        }\r\n        labelComponent={\r\n          <VictoryTooltip\r\n            flyoutStyle={{\r\n              fill: \"none\",\r\n              fontSize: 20\r\n            }}\r\n          />\r\n        }\r\n        style={{ data: { fill: \"grey\" } }}\r\n      />\r\n      <VictoryLine\r\n        data={data}\r\n        x=\"date\"\r\n        y=\"new_cases\"\r\n        style={{ data: { stroke: \"blue\", strokeWidth: 5 } }}\r\n      />\r\n    </VictoryChart>\r\n  );\r\n};\r\n\r\nclass CovidCharts extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      counties: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(Target)\r\n      .then(results => results.json())\r\n      .then(data => {\r\n        console.log(typeof data);\r\n        console.log(data);\r\n        this.setState({ counties: data.counties });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const counties = this.state.counties;\r\n    return (\r\n      <Container>\r\n        <Header as=\"h1\">\r\n          Reported COVID-19 Cases in Massachusetts by County\r\n        </Header>\r\n        <Header as=\"h1\" style={{ color: \"blue\" }}>\r\n          New Cases\r\n        </Header>\r\n        <Header as=\"h1\" style={{ color: \"grey\", marginBottom: \"2rem\" }}>\r\n          Total Cases\r\n        </Header>\r\n        <Grid columns=\"3\">\r\n          <>\r\n            {counties.map(c => {\r\n              return (\r\n                <>\r\n                  <Grid.Column width=\"5\" key={\"g\" + c.county}>\r\n                    <Header as=\"h2\" key={\"h\" + c.county}>\r\n                      {c.county}\r\n                    </Header>\r\n                    {countyCharts(sliceData(c.data))}\r\n                  </Grid.Column>\r\n                </>\r\n              );\r\n            })}\r\n          </>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CovidCharts;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/react-vis/dist/style.css\";\nimport CovidCharts from \"./CovidCharts\";\n\nclass App extends Component {\n  render() {\n    return <CovidCharts />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}